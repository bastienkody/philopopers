Tests correction
- 1 800 200 200		(no eat - die)
- 5 800 200 200		(no die)
- 5 800 200 200 7	(no die - stop after 7 eat)
- 4 410 200 100		(no die)
- 4 310 200 100		(1 die)

tests supp
- 3 410 200 100	(die)
- 4 800 200 2000 (die, but exec wait for other to finish sleeping)
- 200 410 200 100 (hard but ok)
- 3 800 200 70 (no die, youre ko if you think too long)

Order
	eat -> sleep -> think

Arguments
	argv++ 
	argv[0] == nb philo
	argv[1] == time to die
	argv[2] == time to eat
	argv[3] == time to sleep
	argv[4] == nb of meals (optional)

Struct data
	Contient les infos de la simulation + mutexes (ptr sur mutex tab)
	Malloce 1 seule fois -> chaque philo a un ptr sur elle
	.go_on --> boolen pour savoir si on continue ou stop la simulation
	.t0 : reference de depart de la simulation. On considere que ce timeval
	represente la valeur 0 (== un epoch pour philo)

Struct philo (utilisee en TABLEAU)
	Contient les infos indiv de chaque philo + un ptr sur struct data.

Fourchettes (futex)
	== tableau de ptr sur mutex
	on considere que mutex i est place a gauche du philo i, et mutex i+1
	a droite du philo. Chaque philo i mange avec mutex i et mutex i+1, 
	sauf le dernier : mutex i + mutex 0
	(attention : mutex 1 est en indice 0 !)

Writing mutex (wutex)
	signle mutex used to regulate acces to print timestamp
	stored as apointer in data

Meal mutex Mealtex (resp go_on mutex Gutex)
	regulate acces to meal_nb and last_meal (resp go_on)

Phtreadcreate failure
	Si fail, j'appelle la fct qui detach tous les threads deja cree, et met
	go_on a False. La simulation ne continue pas, threading quitte, pas besoin
	de join. Les philo malloces seront free via endfree dans main.
	Si detach fail aussi : des threads a join resteront non joigned. 

Pas de "time_to_think" donne
	On en calcul un "theorique" -> tt_think = tt_die - (tt_eat + tt_sleep)
	NON -> le but etant de ne pas mourir et sans consigne concernant le think,
	on ne fait pas penser les philo (juste un print sans usleep). J'etais ko
	avec un temps de sleep court et nombre impairs car je faisais penser alors
	que des pairs de fourchettes etaient deja dispo. 

Launcher (threading, half_launcher, delay)
	Pour synchroniser, a la creation des threads, on fait manger les philos
	pairs, et penser les impairs. Mais avec un temps de think nul, on a des 
	impairs qui passent devant des pairs (normal) et bloquent des fourchettes.
	Je refuse de lancer des philos en decale, et je peux pas think.
	Du coup technique ultime : lancer d'abord les pairs, puis les impairs. 
	Neanmoins, toujours des imapirs qui passent devant. Du coup j'ai un delais
	entre les deux lancements. Plus il y a de philos, puis les half_launcher
	sont longs, moins il y a besoin de delais. On calcule un delay de 200 - nb 
	mais en protegeant si jamais on me test avec > 200

Simulation
	3 actions : eat, sleep, think --> 3 fonctions
	Chaque action appelle la suivante
		eat -> sleep
		sleep -> think
		think -> eat
	Philos pairs demarrent par eat, impairs par think

Printer
	wutex lock
	printf (timestmp + philo_nb + msg) 
	wutex unlock
	7 couleurs differents

Time mgmt
	usleep imprecis (>= vs =)
	on sleep un gros chunk (90% du besoin)
	et ensuite par petits chunks (2 microseconds dans mes test is good) tant
	qu'on a pas atteint le besoin, en checkant l'horloge a chaque tour de boucle
	sur ces 10 derniers %.
	pb des temps de sleep longs : il faudrait checker go_on pendant les usleep.
	cela demanderait de ne faire que des petits chunks, ce qui ralentit pas mal.
	--> si le temps d'attente est long (>=1s), j'appelle une autre fonction ft_usleep
	qui check go_on avant de lancer des usleep d'1ms. Ca marche nickel et ca ne
	ralentit pas les autres tests. 

LES CHECKERS (dans threading, le main thread)
- Check_Death :
	check le temps de mort pour tous les philos
	set go_on to false si un est mort + print death
- Check_Meals (appele uniquement si meal_nb est donne en arg) : 
	check si tous les philos ont un meal_nb a 0
	si oui, go_on == false
(dans les actions)
	Verifient go_on avant chaque demarage d'action ; return rien si == false
	Un probleme : on verifie avant chaque demarage et pendant les usleep longs.

Lock des fourchettes (futex_lock)
	appeler dans eating
	check go on et return 0 si false
	lock direct la fourchette de gauche 
	si il n'y quun seul philo : return 1
	si poly philo : va lock la fourchette nb (ou 0 si philo == nb) [lock order inversion ici mais deadlock impossible]
	et return 2
	ce return est utilise ensuite pour appeler fourchettes unlock (1 ou 2 forks?)
	en fin de simul des philos peuvent toujours prendre des forks : on ne print
	que si go_on, et futex_unlock sera bien appele ensuite avant de return. 

Gestion des cas particuliers
	- overflow ou nb negatif via atoi novflw dans arg to data
	- 0 philo : init philo return null (se confond avec une erreur de malloc)
	- 1 philo : on check que nb > 1 avant de prendre la fourchette de droite
	- 0 min_meal : on check au debut du main et return direct
	- temps d'attente/d'action long : on utilise un autre usleep pour check go_on
