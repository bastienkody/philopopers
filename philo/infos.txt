Tests correction
- 1 800 200 200		(no eat - die)
- 5 800 200 200		(no die)
- 5 800 200 200 7	(no die - stop after 7 eat)
- 4 2410 200 00		(no die)
- 4 310 200 100		(1 die)

Order
	eat -> sleep -> think

Arguments
	argv++ 
	argv[0] == nb philo
	argv[1] == time to die
	argv[2] == time to eat
	argv[3] == time to sleep
	argv[4] == nb of meals (optional)

Struct data
	Contient les infos de la simulation + mutexes (ptr sur mutex tab)
	Malloce 1 seule fois -> chaque philo a un ptr sur elle
	.go_on --> boolen pour savoir si on continue ou stop la simulation
	.t0 : reference de depart de la simulation. On considere que ce timeval
	represente la valeur 0 (un peu comme un epoch pour philo)

Data->go_on
	Maybe need of mutex on it? 
	- used by each thread to start activity
	- used by main thread for check_death and meal

Struct philo (utilisee en TABLEAU)
	Contient les infos indiv de chaque philo + un ptr sur struct data.

Fourchettes (futex)
	== tableau de ptr sur mutex
	on considere que mutex i est place a gauche du philo i, et mutex i+1
	a droite du philo. Chaque philo i mange avec mutex i et mutex i+1, 
	sauf le dernier : mutex i + mutex 0
	(attention : mutex 1 est en indice 0 !)

Writing mutex (wutex)
	signle mutex used to regulate acces to print timestamp
	stored as apointer in data

Phtreadcreate failure
	Si fail, j'appelle la fct qui detach et met tous les t_id a 0. Dans routine
	il faudrait ensuite ne pas exec ceux avec t_id = 0. Sauf que t_id peut
	valoir 0 car j'attache l'id apres la create (et lappel de la routine).
	Ya des pb avec vlg et meme sans (grd nb de philo). 

Pas de "time_to_think" donne
	On en calcul un "theorique" -> tt_think = tt_die - (tt_eat + tt_sleep)
	Au demarrage, pour eviter que chaque philo prenne une fourchette (et que ca
	bloque chacun de manger car personne n'a 2 fourchette) je vais faire thinker
	la moitie des philo (pairs vs impairs)

Simulation
	3 actions : eat, sleep, think --> 3 fonctions
	Chaque action appelle la suivante
		eat -> sleep
		sleep -> think
		think -> eat
	Philos pairs demarrent par eat
	REGARDER QUI SONT LES + NOMBREUX (pairs ou impairs) ET FAIRE MANGER EN
	PREMIER CEUX LA (prioriser le manger) ??
	Philos impairs par think (tt_think? what if negative?)

Actions
-eatp
	check si la simul doit go_on
	lock les futex 
		{
		futex left lock (idx = philo nb - 1)
		print timestamp fork
		si philo > 1
			si philo_nb < total_philo
				futex right lock (idx = philo nb)
			else
				futex right (idx = 0)
			print timestamp fork
		}
	print timestamp eating
	usleep(tt_eat)
	unlock les futex (meme logique que lock)
-sleep
	RAS : check go_on, print timestamp sleep, usleep tt_sleep
-think
	check go_on
	check tt_think >= 0
	usleep tt_think ? only if >= 0 ? Or direclty go to eat? maybe think smthg 
	like 70% of tt_think ? 

Printer
	wutex lock
	printf (timestmp + philo_nb + msg) 
	wutex unlock
	--> pb d'opti? try itoa (v_int + v_unsigned long need) + strlen + write
	--> mettre des couleurs (toutes diff nb_philo < 10, sinon on alterne)

Time mgmt
	peut etre set data->t0 a bit later 
	jouer sur les temps du syscal usleep pour voir si ft_usleep se comporte mieux (usec
	trop long vs trop d'appels syscal usleep?)

LES CHECKERS (dans un thread != des philos?)
- Check_Death : 1 philo meurt -> printdeath et stop simul
	- Soit chaque philo verifie avant d'attaquer une activite (peut mourrir pendant 
	qu'il dort ou sleep donc a checker aussi pdt les activites? bof)
	- Soit dans un thread a part (main?), une fonction qui verifie pour tous les 
	philos et frequemment (toutes les 10ms, moins?)
	Doit direct print death
	Doit direct modifier data->go_on
- Check_Meals : all philos have eaten x times
	Idem que check death sauf qu'il faut tous que tous les philos mangent x
	fois. 
	rien a print
	Doit direct modifier data->go_on
